generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id            String       @id @default(uuid())
  name          String       @unique
  stockQuantity Decimal
  unit          String
  recipeItems   RecipeItem[]
}

model RecipeItem {
  id           String     @id @default(uuid())
  quantity     Decimal
  productId    String
  product      Product    @relation(fields: [productId], references: [id])
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Product {
  id          String       @id @default(uuid())
  name        String       @unique // Adicionei @unique aqui, é uma boa prática
  price       Decimal
  createdAt   DateTime     @default(now())
  orderItems  OrderItem[]
  recipeItems RecipeItem[]
}

model Table {
  id     String  @id @default(uuid())
  name   String  @unique
  orders Order[]
}

model Order {
  id        String      @id @default(uuid())
  total     Decimal
  createdAt DateTime    @default(now())
  items     OrderItem[]
  tableId   String?
  table     Table?      @relation(fields: [tableId], references: [id])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// ==================================================================
// ✨ NOSSO NOVO MODELO FINANCEIRO
// ==================================================================
model FinancialTransaction {
  id          String    @id @default(uuid())
  description String    // Ex: "Aluguel", "Fornecedor de Bebidas"
  amount      Decimal   // O valor da transação
  type        String    // 'DESPESA' (Expense) ou 'RECEITA' (Revenue)
  dueDate     DateTime? // Data de vencimento (para contas a pagar)
  paidAt      DateTime? // Data que foi paga (para conciliação)
  createdAt   DateTime  @default(now())
}